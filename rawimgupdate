<#
.SYNOPSIS
    Upgrades Raw Image Extension to the latest version.
.DESCRIPTION
    This script checks for the latest Raw Image Extension version, upgrades to the latest version
    if an older version is detected, and logs the status to a central CSV file.
.NOTES
    Requires administrative privileges to upgrade FOD components.
#>

# Ensure script is running as admin
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Warning "This script requires administrative privileges to upgrade components."
    Write-Warning "Please restart the script as Administrator."
    exit
}

# CONFIGURE THIS -- Set to your actual network path or local path
$CsvPath = 'C:\Logs\rawimage_versions.csv'

try {
    # Gather machine info
    $MachineName = $env:COMPUTERNAME
    $Timestamp = Get-Date -Format 's'
    
    Write-Host "Checking for Raw Image Extension upgrades on $MachineName..." -ForegroundColor Cyan
    
    # Record initial state
    $pkg = Get-AppxPackage -AllUsers | Where-Object { $_.Name -like '*RawImageExtension*' }
    $initialAppxVersion = if ($null -ne $pkg) { $pkg.Version.ToString() } else { 'Not Installed' }
    
    $capEntries = @(Get-WindowsCapability -Online | Where-Object { $_.Name -like 'Microsoft.Windows.RawImageExtension*' })
    $initialCapabilityVersion = 'Not Found'
    $initialCapabilityState = 'Not Found'
    $installedCap = $null
    
    if ($capEntries.Count -gt 0) {
        $installedCap = $capEntries | Where-Object { $_.State -eq 'Installed' } | Select-Object -First 1
        if ($null -ne $installedCap) {
            $nameParts = $installedCap.Name -split '~~~~'
            $initialCapabilityVersion = if ($nameParts.Count -gt 1) { $nameParts[1] } else { 'Unknown' }
            $initialCapabilityState = $installedCap.State
        } else {
            $firstCap = $capEntries[0]
            $nameParts = $firstCap.Name -split '~~~~'
            $initialCapabilityVersion = if ($nameParts.Count -gt 1) { $nameParts[1] } else { 'Unknown' }
            $initialCapabilityState = $firstCap.State
        }
    }
    
    $initialInstalled = if (($null -ne $pkg) -or ($null -ne $installedCap)) { 'Yes' } else { 'No' }
    
    Write-Host "Current version:" -ForegroundColor Cyan
    Write-Host "- Store App Version: $initialAppxVersion"
    Write-Host "- FOD Capability Version: $initialCapabilityVersion"
    Write-Host "- FOD Capability State: $initialCapabilityState"
    Write-Host "- Installed: $initialInstalled"
    
    if ($initialInstalled -eq 'No') {
        Write-Host "`nRaw Image Extension is not currently installed. Will install the latest version." -ForegroundColor Yellow
    } else {
        Write-Host "`nRaw Image Extension is already installed. Will check for upgrades." -ForegroundColor Yellow
    }
    
    # Check for latest FOD version
    Write-Host "`nChecking for latest FOD version..." -ForegroundColor Cyan
    # Force refresh of capabilities catalog
    try {
        Write-Host "Refreshing Windows capabilities catalog..."
        $null = Invoke-Expression "DISM.exe /Online /Cleanup-Image /RestoreHealth" 
    } catch {
        Write-Warning "Unable to refresh capabilities catalog: $_"
    }
    
    # Get all available Raw Image Extension capabilities
    $availableCapabilities = @(Get-WindowsCapability -Online | 
                            Where-Object { $_.Name -like 'Microsoft.Windows.RawImageExtension*' })
    
    if ($availableCapabilities.Count -eq 0) {
        Write-Warning "No Raw Image Extension capabilities found on Windows Update servers."
    } else {
        # Find the latest version
        $latestCap = $availableCapabilities | 
                    Sort-Object { 
                        $verPart = ($_.Name -split '~~~~')[1]
                        if ($verPart -match '^\d+\.\d+\.\d+\.\d+$') {
                            try { [version]$verPart } catch { [version]"0.0.0.0" }
                        } else {
                            [version]"0.0.0.0"
                        }
                    } -Descending | 
                    Select-Object -First 1
        
        $latestVersion = ($latestCap.Name -split '~~~~')[1]
        Write-Host "Latest available FOD version: $latestVersion" -ForegroundColor Green
        
        # Check if upgrade is needed
        $needsUpgrade = $false
        if ($null -eq $installedCap) {
            $needsUpgrade = $true
            Write-Host "No FOD version installed, will install latest version."
        } else {
            $installedVersion = ($installedCap.Name -split '~~~~')[1]
            if ($installedVersion -ne $latestVersion) {
                $needsUpgrade = $true
                Write-Host "Upgrade needed: Current version $installedVersion -> Latest version $latestVersion"
            } else {
                Write-Host "FOD is already at the latest version: $installedVersion" -ForegroundColor Green
            }
        }
        
        # Perform the upgrade if needed
        if ($needsUpgrade) {
            Write-Host "`nUpgrading to latest FOD version..." -ForegroundColor Cyan
            
            # If we have an older version, remove it first
            if ($null -ne $installedCap) {
                try {
                    Write-Host "Removing existing FOD version: $($installedCap.Name)"
                    Remove-WindowsCapability -Online -Name $installedCap.Name | Out-Null
                    Write-Host "Successfully removed old version."
                } catch {
                    Write-Warning "Failed to remove old capability: $_"
                }
            }
            
            # Install the latest version
            try {
                Write-Host "Installing latest FOD version: $($latestCap.Name)"
                Add-WindowsCapability -Online -Name $latestCap.Name | Out-Null
                Write-Host "Upgrade successful!" -ForegroundColor Green
            } catch {
                Write-Error "Failed to install latest capability: $_"
                
                # Try DISM as fallback
                try {
                    Write-Host "Attempting upgrade via DISM from Windows Update..." -ForegroundColor Yellow
                    $result = Invoke-Expression "DISM.exe /Online /Add-Capability /CapabilityName:$($latestCap.Name) /Source:`"Windows Update`""
                    if ($result -match "successfully") {
                        Write-Host "Successfully upgraded Raw Image Extension via DISM!" -ForegroundColor Green
                    } else {
                        Write-Warning "DISM upgrade attempt may have failed. Checking status..."
                    }
                } catch {
                    Write-Warning "DISM upgrade failed: $_"
                }
            }
        }
    }
    
    # Check for Microsoft Store updates
    if ($null -ne $pkg) {
        Write-Host "`nChecking for Microsoft Store app updates..." -ForegroundColor Cyan
        try {
            # Try to update via PowerShell if modern way is available
            if (Get-Command Get-CimInstance -ErrorAction SilentlyContinue) {
                Write-Host "Requesting app update through Windows Store..."
                Get-CimInstance -Namespace "Root\cimv2\mdm\dmmap" -ClassName "MDM_EnterpriseModernAppManagement_AppManagement01" | 
                Invoke-CimMethod -MethodName UpdateScanMethod | Out-Null
                Start-Sleep -Seconds 2
            }
            
            # Try to update via winget
            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "Upgrading via winget..."
                Start-Process -FilePath "winget" -ArgumentList "upgrade --id 9NCTDW2W1BH8" -Wait
                Write-Host "Winget upgrade attempt completed."
            } else {
                # Fallback to manual message
                Write-Host "For Store app updates, please check the Microsoft Store app manually." -ForegroundColor Yellow
                Write-Host "You can open the Store and check for updates in the Library section."
            }
        } catch {
            Write-Warning "Store update check failed: $_"
        }
    }
    
    # Wait for potential upgrades to complete
    Write-Host "`nWaiting for upgrades to complete..." -ForegroundColor Cyan
    Start-Sleep -Seconds 5
    
    # Check final state
    $pkg = Get-AppxPackage -AllUsers | Where-Object { $_.Name -like '*RawImageExtension*' }
    $finalAppxVersion = if ($null -ne $pkg) { $pkg.Version.ToString() } else { 'Not Installed' }
    
    $capEntries = @(Get-WindowsCapability -Online | Where-Object { $_.Name -like 'Microsoft.Windows.RawImageExtension*' })
    $finalCapabilityVersion = 'Not Found'
    $finalCapabilityState = 'Not Found'
    
    if ($capEntries.Count -gt 0) {
        $installedCap = $capEntries | Where-Object { $_.State -eq 'Installed' } | Select-Object -First 1
        if ($null -ne $installedCap) {
            $nameParts = $installedCap.Name -split '~~~~'
            $finalCapabilityVersion = if ($nameParts.Count -gt 1) { $nameParts[1] } else { 'Unknown' }
            $finalCapabilityState = $installedCap.State
        } else {
            $firstCap = $capEntries[0]
            $nameParts = $firstCap.Name -split '~~~~'
            $finalCapabilityVersion = if ($nameParts.Count -gt 1) { $nameParts[1] } else { 'Unknown' }
            $finalCapabilityState = $firstCap.State
        }
    }
    
    $finalInstalled = if (($null -ne $pkg) -or ($capEntries | Where-Object { $_.State -eq 'Installed' }).Count -gt 0) { 'Yes' } else { 'No' }
    
    # Determine action taken
    $actionTaken = if ($initialInstalled -eq 'No' -and $finalInstalled -eq 'Yes') { 
        'Installed' 
    } elseif ($initialInstalled -eq 'Yes' -and $finalInstalled -eq 'Yes') {
        if ($initialAppxVersion -ne $finalAppxVersion -or $initialCapabilityVersion -ne $finalCapabilityVersion) {
            'Upgraded'
        } else {
            'Already Up-to-Date'
        }
    } else { 
        'Failed' 
    }
    
    # Build CSV record
    $Record = [PSCustomObject]@{
        MachineName             = $MachineName
        Timestamp               = $Timestamp
        InitialAppxVersion      = $initialAppxVersion
        InitialCapabilityVersion = $initialCapabilityVersion
        InitialCapabilityState  = $initialCapabilityState
        InitialInstalled        = $initialInstalled
        FinalAppxVersion        = $finalAppxVersion
        FinalCapabilityVersion  = $finalCapabilityVersion
        FinalCapabilityState    = $finalCapabilityState
        FinalInstalled          = $finalInstalled
        ActionTaken             = $actionTaken
    }
    
    # Ensure folder exists
    $Folder = Split-Path $CsvPath -Parent
    if (-not (Test-Path $Folder)) {
        try {
            New-Item -Path $Folder -ItemType Directory -Force | Out-Null
            Write-Host "Created directory: $Folder"
        }
        catch {
            throw "Failed to create directory $Folder`: $_"
        }
    }
    
    # Export or append with error handling
    try {
        if (-not (Test-Path $CsvPath)) {
            $Record | Export-Csv -Path $CsvPath -NoTypeInformation -Force
            Write-Host "Created new CSV file: $CsvPath"
        }
        else {
            $Record | Export-Csv -Path $CsvPath -NoTypeInformation -Append
            Write-Host "Appended to existing CSV file: $CsvPath"
        }
        Write-Host "`nRecorded Raw Image Extension info to $CsvPath" -ForegroundColor Green
    }
    catch {
        Write-Error "Failed to write to CSV file $CsvPath`: $_"
    }
    
    # Summarize
    Write-Host "`nSummary:" -ForegroundColor Cyan
    Write-Host "Machine Name: $MachineName"
    Write-Host "Action Taken: $actionTaken"
    Write-Host "Store App Version: $finalAppxVersion (was: $initialAppxVersion)"
    Write-Host "FOD Capability Version: $finalCapabilityVersion (was: $initialCapabilityVersion)"
    Write-Host "FOD Capability State: $finalCapabilityState (was: $initialCapabilityState)"
    Write-Host "Raw Image Extension Installed: $finalInstalled (was: $initialInstalled)"
    
    if ($actionTaken -eq 'Upgraded') {
        Write-Host "`nRaw Image Extension has been successfully upgraded to the latest version!" -ForegroundColor Green
    } elseif ($actionTaken -eq 'Already Up-to-Date') {
        Write-Host "`nRaw Image Extension is already at the latest version." -ForegroundColor Green
    } elseif ($actionTaken -eq 'Installed') {
        Write-Host "`nRaw Image Extension has been successfully installed!" -ForegroundColor Green
    } else {
        Write-Host "`nWarning: Failed to upgrade Raw Image Extension. Try upgrading manually from Microsoft Store." -ForegroundColor Red
    }
}
catch {
    Write-Error "An unexpected error occurred: $_"
}
