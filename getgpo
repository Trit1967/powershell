<#
.SYNOPSIS
    Extracts both Computer and User Group Policy Results for comparison.
.DESCRIPTION
    This script runs gpresult with specific parameters to ensure both Computer and User
    policies are captured for comparison between domains.
.EXAMPLE
    .\Extract-GPResult-Complete.ps1
#>

# Output folder - change as needed
$OutputFolder = "C:\GPOComparison"

# Create output folder if it doesn't exist
if (-not (Test-Path $OutputFolder)) {
    New-Item -Path $OutputFolder -ItemType Directory -Force | Out-Null
}

# Get computer and domain info
$computerName = $env:COMPUTERNAME
$domainInfo = Get-WmiObject Win32_ComputerSystem
$domainName = $domainInfo.Domain

# Create a prefix for filenames based on domain
$filePrefix = ($domainName.Split('.'))[0] + "_"

# Define output file paths
$computerXML = Join-Path $OutputFolder ($filePrefix + "Computer_GPResult.xml")
$userXML = Join-Path $OutputFolder ($filePrefix + "User_GPResult.xml")
$combinedHTML = Join-Path $OutputFolder ($filePrefix + "Combined_GPResult.html")
$computerHTML = Join-Path $OutputFolder ($filePrefix + "Computer_GPResult.html")
$userHTML = Join-Path $OutputFolder ($filePrefix + "User_GPResult.html")
$summaryOutput = Join-Path $OutputFolder ($filePrefix + "GPO_Summary.csv")

Write-Host "Extracting Group Policy Results on $computerName in domain $domainName"
Write-Host "Output files will be saved to: $OutputFolder"

try {
    # Run gpresult for COMPUTER policies - explicitly specify scope
    Write-Host "Generating Computer policy results..."
    $processComputer = Start-Process -FilePath "gpresult" -ArgumentList "/scope computer /f /x `"$computerXML`"" -Wait -NoNewWindow -PassThru
    $processComputerHTML = Start-Process -FilePath "gpresult" -ArgumentList "/scope computer /h `"$computerHTML`" /f" -Wait -NoNewWindow -PassThru
    
    if ($processComputer.ExitCode -ne 0) {
        Write-Warning "gpresult for Computer policies returned exit code $($processComputer.ExitCode)"
    }

    # Run gpresult for USER policies - explicitly specify scope
    Write-Host "Generating User policy results..."
    $processUser = Start-Process -FilePath "gpresult" -ArgumentList "/scope user /f /x `"$userXML`"" -Wait -NoNewWindow -PassThru
    $processUserHTML = Start-Process -FilePath "gpresult" -ArgumentList "/scope user /h `"$userHTML`" /f" -Wait -NoNewWindow -PassThru
    
    if ($processUser.ExitCode -ne 0) {
        Write-Warning "gpresult for User policies returned exit code $($processUser.ExitCode)"
    }
    
    # Run gpresult for COMBINED view (both Computer and User)
    Write-Host "Generating combined policy results..."
    $processCombined = Start-Process -FilePath "gpresult" -ArgumentList "/h `"$combinedHTML`" /f" -Wait -NoNewWindow -PassThru

    # Create a consolidated summary of applied GPOs
    Write-Host "Creating GPO summary CSV..."
    
    $gpoSummary = @()
    
    # Process Computer GPOs
    if (Test-Path $computerXML) {
        [xml]$computerData = Get-Content $computerXML
        
        if ($computerData.Rsop.ComputerResults.GPO) {
            foreach ($gpo in $computerData.Rsop.ComputerResults.GPO) {
                $gpoSummary += [PSCustomObject]@{
                    Domain = $domainName
                    Computer = $computerName
                    PolicyType = "Computer"
                    GPOName = $gpo.Name
                    Applied = "Yes"
                    LinkName = $gpo.LinkName
                    Status = $(if ($gpo.Enabled -eq "true") { "Enabled" } else { "Disabled" })
                    FilterType = $gpo.FilterName
                    ID = $gpo.ID
                }
            }
        } else {
            Write-Warning "No Computer GPOs found in XML data"
        }
    } else {
        Write-Warning "Computer XML file not found: $computerXML"
    }
    
    # Process User GPOs
    if (Test-Path $userXML) {
        [xml]$userData = Get-Content $userXML
        
        if ($userData.Rsop.UserResults.GPO) {
            foreach ($gpo in $userData.Rsop.UserResults.GPO) {
                $gpoSummary += [PSCustomObject]@{
                    Domain = $domainName
                    Computer = $computerName
                    PolicyType = "User"
                    GPOName = $gpo.Name
                    Applied = "Yes"
                    LinkName = $gpo.LinkName
                    Status = $(if ($gpo.Enabled -eq "true") { "Enabled" } else { "Disabled" })
                    FilterType = $gpo.FilterName
                    ID = $gpo.ID
                }
            }
        } else {
            Write-Warning "No User GPOs found in XML data"
        }
    } else {
        Write-Warning "User XML file not found: $userXML"
    }
    
    # Export the summary to CSV
    if ($gpoSummary.Count -gt 0) {
        $gpoSummary | Export-Csv -Path $summaryOutput -NoTypeInformation
        Write-Host "Exported $($gpoSummary.Count) GPO entries to summary file"
    } else {
        Write-Warning "No GPOs found to export to summary file"
    }
    
    # List all Computer GPOs for verification
    Write-Host "`nComputer GPOs found:"
    $computerGPOs = $gpoSummary | Where-Object { $_.PolicyType -eq "Computer" }
    if ($computerGPOs) {
        $computerGPOs | ForEach-Object { Write-Host "- $($_.GPOName)" }
    } else {
        Write-Host "None found"
    }
    
    # List all User GPOs for verification
    Write-Host "`nUser GPOs found:"
    $userGPOs = $gpoSummary | Where-Object { $_.PolicyType -eq "User" }
    if ($userGPOs) {
        $userGPOs | ForEach-Object { Write-Host "- $($_.GPOName)" }
    } else {
        Write-Host "None found"
    }
    
    Write-Host "`nGPResult extraction complete!"
    Write-Host "Generated files:"
    Write-Host "- Computer XML: $computerXML"
    Write-Host "- User XML: $userXML"
    Write-Host "- Combined HTML: $combinedHTML"
    Write-Host "- Computer HTML: $computerHTML"
    Write-Host "- User HTML: $userHTML"
    Write-Host "- GPO Summary: $summaryOutput"
    
    Write-Host "`nTo compare between domains:"
    Write-Host "1. Run this script on a machine in each domain"
    Write-Host "2. Copy all files to a single location"
    Write-Host "3. Compare the summary CSV files or HTML reports"
    Write-Host "4. For a quick analysis, run: Compare-Object -ReferenceObject (Import-Csv 'child_GPO_Summary.csv') -DifferenceObject (Import-Csv 'parent_GPO_Summary.csv') -Property GPOName,PolicyType"
}
catch {
    Write-Error "Error extracting GPResult data: $_"
}
